package algorithms.constructiveAlgorithms;

import java.util.Arrays;
import java.util.Scanner;

public class Bonetrousle {

    public static void main(String[] args) {
    	Scanner in = new Scanner(System.in);
    	int trips = in.nextInt();
    	for (int i=0; i<trips; i++) {
    		long sticks = in.nextLong();
    		long stored = in.nextLong();
    		int boxes = in.nextInt();
    		
    		long availableSticks = stored * (stored+1)/2;
    		long maxSticksBuy = availableSticks-((stored-boxes)*(stored-boxes+1)/2);
    		long minSticksBuy = (boxes) * (boxes+1)/2;
    		
    		if (stored<boxes || availableSticks<sticks || maxSticksBuy<sticks || sticks<minSticksBuy) {
    			System.out.println(-1);
    			continue;
    		}
    		
    		long[] buyList = new long[boxes];
    		for(int k=0; k<buyList.length; k++) {
    			buyList[k] = k+1;
    		}
    		long sticksInBasket = minSticksBuy;
    		int xChgInd = 0;
    		long minAvailable = boxes+1;
    		long maxAvailable = stored;
    		while(xChgInd<buyList.length && sticksInBasket<sticks) {
    			long diff = sticks - sticksInBasket;
    			if (diff<maxAvailable-buyList[xChgInd]) {
    				if (minAvailable>=buyList[xChgInd]+diff) {
    					sticksInBasket += diff;
    					buyList[xChgInd] += diff; 
    				} else {
    					xChgInd++;
    				}
    			} else {
    				sticksInBasket += maxAvailable-buyList[xChgInd];
    				buyList[xChgInd] = maxAvailable;
    				maxAvailable--;
    				xChgInd++;
    			}
    		}
    		
    		Arrays.sort(buyList);
    		for (int n=0; n<buyList.length-1; n++) {
    			System.out.print(buyList[n] + " ");
    		}
    		System.out.println(buyList[buyList.length-1]);
    	}
    	in.close();
    }

}
